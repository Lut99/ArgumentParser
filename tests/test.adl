/* TEST.adl
 *   by Lut99
 *
 * A test file for me to try and create the Argument Definition Language in,
 * which the redesigned ArgumentParser can compile to a hard-coded, super-
 * efficient (or so we hope) parser.
 */

#define DEBUG
#define DEBUG2

#ifdef DEBUG && (DEBUG2 || DEBUG3)
#include stdtypes
#include "tests/test_extern.adl"
#endif

meta {
    .auto_help (false);
}

<date> {
    .name "Date";
    .pattern <uint>.pattern "-" <uint>.pattern "-" <uint>.pattern;
}

<hello_world> {
    .name "Hello, world!";
    .pattern r"[A-Za-z_]+";
    .source "hello_world.cpp";
}

#ifdef DEBUG
<regex_test> {
    .name "Regex Test";
    .pattern <uint>.pattern r"-\.\/" <uint>.pattern r"-\.\/" <uint>.pattern;
    .source ++{
        // Haha, this shouldn't cause errors! }++
        return ++<1>++;
    }++;
}
#endif

positional1 <int> {
    /* Common stuff */
    
    // Sets the category for the help string
    .category "Miscellaneous";

    // Sets the description for the help string
    .description "A new argumentparser,\nespecially for you... and me";
    
    // Sets the default value - will be parsed at compile time
    .default "1";



    /* Positional-specific stuff */

    // Overrides the index derived from the order that the Positional is given
    .index 1;
}

// @warning "Hello there!"
// @warning "General kenobi! You are a bold one!"
variadic_positional <int>... {
    .index ---5.5;
}

[optional_positional] <int> <uint> {
    .category "Wouldn't you like to know, wheater boy";
}

#ifdef DEBUG
@suppress empty-statement
--option -o <int> {
    ;
}

#ifdef DEBUG2
[--optional_option] <int> {

}
#endif
#endif
